{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,aACjCC,EAAkBH,EAAQE,cAAc,UAE9CJ,EAAAM,OAAOC,KAAK,CACVC,SAAU,OACVC,cAAc,EACdC,kBAAmB,aACnBC,SAAU,OACVC,MAAO,IACPC,QAAS,CACPC,WAAY,aAIhB,IAwBMC,EAAsB,WAI1B,I,IA3BMC,E,cAUc,IAACC,EAAUL,GAAVK,EAkBLC,EAlBeN,EAkBZO,EAjBnB,IAAIC,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEJ,WAAUL,UAEpBU,EAAO,CAAEL,WAAUL,S,GAEpBA,E,KASAe,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUL,EAAKgB,EAALhB,MACjBZ,EAAAM,OAAOuB,QAAQ,qBAAoCC,OAAfb,EAAS,QAAYa,OAANlB,EAAM,M,IAE1DmB,OAAM,SAAAH,G,IAAGX,EAAQW,EAARX,SAAUL,EAAKgB,EAALhB,MAClBZ,EAAAM,OAAOO,QAAQ,oBAAmCiB,OAAfb,EAAS,QAAYa,OAANlB,EAAM,M,IAEzDoB,SAAQ,WACHd,IAAMe,GAAQC,G,IAGtBf,GAAkBgB,C,EAfYC,GAxB1BpB,EAAiB,GACN,IAAIqB,SAASnC,GAErBoC,SAAQ,SAACC,EAAOC,GACvBxB,EAAewB,GAAOC,OAAOF,E,IAGxBvB,GAiBC0B,EAAwBN,EAAxBxB,MAAOuB,EAAiBC,EAAjBD,KAAMF,EAAWG,EAAXH,OACjBd,EAAiBuB,EAEZC,EAAI,EAAGA,GAAKV,EAAQU,GAAK,EAACC,EAAAD,E,EAgB/BT,EAA0B,WAC9B7B,EAAgBwC,gBAAgB,W,EAUlC3C,EAAQ4C,iBAAiB,UAPJ,SAAAC,GACnBA,EAAMC,iBAENjC,IACAmB,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('form.form');\nconst submitButtonRef = formRef.querySelector('button');\n\nNotify.init({\n  distance: '20px',\n  clickToClose: true,\n  cssAnimationStyle: 'from-right',\n  fontSize: '14px',\n  delay: 4000,\n  failure: {\n    background: '#ff4432',\n  },\n});\n\nconst collectFormData = () => {\n  const formDataObject = {};\n  const formData = new FormData(formRef);\n\n  formData.forEach((value, key) => {\n    formDataObject[key] = Number(value);\n  });\n\n  return formDataObject;\n};\n\nconst createPromise = (position, delay) =>\n  new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\nconst createPromisesQueue = () => {\n  const { delay, step, amount } = collectFormData();\n  let iterationDelay = delay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, iterationDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      })\n      .finally(() => {\n        if (i === amount) toggleSubmitButtonState();\n      });\n\n    iterationDelay += step;\n  }\n};\n\nconst toggleSubmitButtonState = () => {\n  submitButtonRef.toggleAttribute('disabled');\n};\n\nconst onFormSubmit = event => {\n  event.preventDefault();\n\n  createPromisesQueue();\n  toggleSubmitButtonState();\n};\n\nformRef.addEventListener('submit', onFormSubmit);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$submitButtonRef","Notify","init","distance","clickToClose","cssAnimationStyle","fontSize","delay","failure","background","$ce04d3a99e08e73b$var$createPromisesQueue","formDataObject","position","i","iterationDelay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","param","success","concat","catch","finally","amount","$ce04d3a99e08e73b$var$toggleSubmitButtonState","step","ref","FormData","forEach","value","key","Number","delay1","i1","_loop","toggleAttribute","addEventListener","event","preventDefault"],"version":3,"file":"03-promises.40e6b8f9.js.map"}