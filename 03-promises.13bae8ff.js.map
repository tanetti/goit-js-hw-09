{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,aAEvCJ,EAAAK,OAAOC,KAAK,CACVC,SAAU,OACVC,cAAc,EACdC,kBAAmB,aACnBC,SAAU,OACVC,MAAO,IACPC,QAAS,CACPC,WAAY,aAIhB,MAWMC,EAAgB,CAACC,EAAUJ,IAC/B,IAAIK,SAAQ,CAACC,EAASC,KACpB,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEF,E,MAAUJ,IAEpBO,EAAO,C,SAAEH,E,MAAUJ,GAAQ,GAE5BA,EAAM,IAGPY,EAAsBC,IAC1B,MAAQb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,GAzBC,CAAAH,IACtB,MAAMI,EAAiB,GAOvB,OANiB,IAAIC,SAASL,GAErBM,SAAQ,CAACC,EAAOC,KACvBJ,EAAeI,GAAOC,OAAOF,EAAM,IAG9BH,CAAc,EAiBWM,CAAgBV,GAChD,IAAIW,EAAiBV,EAErB,IAAK,IAAIW,EAAI,EAAGA,GAAKT,EAAQS,GAAK,EAChCtB,EAAcsB,EAAGD,GACdE,MAAK,EAACtB,SAAEA,EAAQJ,MAAEA,MACjBX,EAAAK,OAAOiC,QAAQ,qBAAqBvB,QAAeJ,MAAU,IAE9D4B,OAAM,EAACxB,SAAEA,EAAQJ,MAAEA,MAClBX,EAAAK,OAAOO,QAAQ,oBAAoBG,QAAeJ,MAAU,IAE7D6B,SAAQ,KACHJ,IAAMT,GAAQc,EAAwBjB,EAAK,IAGnDW,GAAkBT,C,EAIhBe,EAA0BjB,IACNA,EAAKpB,cAAc,UAC3BsC,gBAAgB,WAAW,EAW7CxC,EAAQyC,iBAAiB,UARJC,IACnBA,EAAMC,iBACN,MAAMrB,EAAOoB,EAAME,cAEnBvB,EAAoBC,GACpBiB,EAAwBjB,EAAK","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('form.form');\n\nNotify.init({\n  distance: '20px',\n  clickToClose: true,\n  cssAnimationStyle: 'from-right',\n  fontSize: '14px',\n  delay: 4000,\n  failure: {\n    background: '#ff4432',\n  },\n});\n\nconst collectFormData = form => {\n  const formDataObject = {};\n  const formData = new FormData(form);\n\n  formData.forEach((value, key) => {\n    formDataObject[key] = Number(value);\n  });\n\n  return formDataObject;\n};\n\nconst createPromise = (position, delay) =>\n  new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n\nconst createPromisesQueue = form => {\n  const { delay, step, amount } = collectFormData(form);\n  let iterationDelay = delay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, iterationDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      })\n      .finally(() => {\n        if (i === amount) toggleSubmitButtonState(form);\n      });\n\n    iterationDelay += step;\n  }\n};\n\nconst toggleSubmitButtonState = form => {\n  const submitButtonRef = form.querySelector('button');\n  submitButtonRef.toggleAttribute('disabled');\n};\n\nconst onFormSubmit = event => {\n  event.preventDefault();\n  const form = event.currentTarget;\n\n  createPromisesQueue(form);\n  toggleSubmitButtonState(form);\n};\n\nformRef.addEventListener('submit', onFormSubmit);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","Notify","init","distance","clickToClose","cssAnimationStyle","fontSize","delay","failure","background","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$createPromisesQueue","form","delay1","step","amount","formDataObject","FormData","forEach","value","key","Number","$47d4ff9957288465$var$collectFormData","iterationDelay","i","then","success","catch","finally","$47d4ff9957288465$var$toggleSubmitButtonState","toggleAttribute","addEventListener","event","preventDefault","currentTarget"],"version":3,"file":"03-promises.13bae8ff.js.map"}