{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,aAEvCJ,EAAAK,OAAOC,KAAK,CACVC,SAAU,OACVC,cAAc,EACdC,kBAAmB,aACnBC,SAAU,OACVC,MAAO,IACPC,QAAS,CACPC,WAAY,aAsGhB,MAAMC,EAAmB,IAlGzB,MAUEC,MAAMC,GACJC,KAAKD,KAAOA,EACPC,KAAKD,MAKVC,KAAKC,kBACAD,KAAKN,MAILM,KAAKE,KAILF,KAAKG,QAKVH,KAAKI,0BACLJ,KAAKK,uBALHtB,EAAAK,OAAOO,QAAQ,2BAJfZ,EAAAK,OAAOO,QAAQ,yBAJfZ,EAAAK,OAAOO,QAAQ,2BANfZ,EAAAK,OAAOO,QAAQ,yB,CAsBnBM,kBACmB,IAAIK,SAASN,KAAKD,MAE1BQ,SAAQ,CAACC,EAAOC,KACvBT,KAAKS,GAAOC,OAAOF,EAAM,G,CAI7BJ,0BAC0BJ,KAAKD,KAAKZ,cAAc,mBAChCwB,gBAAgB,W,CAGlCN,sBACE,IAAIO,EAAiBZ,KAAKN,MAE1B,IAAK,IAAImB,EAAI,EAAGA,GAAKb,KAAKG,OAAQU,GAAK,EACrCb,KAAKc,cAAcD,EAAGD,GACnBG,MAAK,EAACC,SAAEA,EAAQtB,MAAEA,MACjBM,KAAKiB,oBAAoB,qBAAqBD,QAAetB,MAAU,IAExEwB,OAAM,EAACF,SAAEA,EAAQtB,MAAEA,MAClBM,KAAKmB,oBAAoB,oBAAoBH,QAAetB,MAAU,IAEvE0B,SAAQ,KACHP,IAAMb,KAAKG,QAAQH,KAAKI,yBAAyB,IAGzDQ,GAAkBZ,KAAKE,I,CAI3BY,cAAcE,EAAUtB,GACtB,OAAO,IAAI2B,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEN,E,MAAUtB,IAEpB6B,EAAO,C,SAAEP,E,MAAUtB,GAAQ,GAE5BA,EAAM,G,CAIbuB,oBAAoBW,GACd5B,KAAK6B,UACP7B,KAAK6B,UAAUD,GAEfE,MAAMF,E,CAIVT,oBAAoBS,GACd5B,KAAK+B,UACP/B,KAAK+B,UAAUH,GAEfE,MAAMF,E,CA5FVI,YAAYC,GACVjC,KAAKD,KAAO,KACZC,KAAKN,MAAQ,KACbM,KAAKE,KAAO,KACZF,KAAKG,OAAS,KACdH,KAAK6B,UAAYI,aAAA,EAAAA,EAAUJ,UAC3B7B,KAAK+B,UAAYE,aAAA,EAAAA,EAAUF,S,GA2Fe,CAC5CF,UAAW9C,EAAAK,OAAO8C,QAClBH,UAAWhD,EAAAK,OAAOO,UAQpBV,EAAQkD,iBAAiB,UALJC,IACnBA,EAAMC,iBACNxC,EAAiBC,MAAMsC,EAAME,cAAc","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('form.form');\n\nNotify.init({\n  distance: '20px',\n  clickToClose: true,\n  cssAnimationStyle: 'from-right',\n  fontSize: '14px',\n  delay: 4000,\n  failure: {\n    background: '#ff4432',\n  },\n});\n\nclass PromiseGenerator {\n  constructor(settings) {\n    this.form = null;\n    this.delay = null;\n    this.step = null;\n    this.amount = null;\n    this.onSuccess = settings?.onSuccess;\n    this.onFailure = settings?.onFailure;\n  }\n\n  start(form) {\n    this.form = form;\n    if (!this.form) {\n      Notify.failure('Target Form not found!');\n      return;\n    }\n\n    this.collectFormData();\n    if (!this.delay) {\n      Notify.failure('Delay value not found!');\n      return;\n    }\n    if (!this.step) {\n      Notify.failure('Step value not found!');\n      return;\n    }\n    if (!this.amount) {\n      Notify.failure('Amount value not found!');\n      return;\n    }\n\n    this.toggleSubmitButtonState();\n    this.createPromisesQueue();\n  }\n\n  collectFormData() {\n    const formData = new FormData(this.form);\n\n    formData.forEach((value, key) => {\n      this[key] = Number(value);\n    });\n  }\n\n  toggleSubmitButtonState() {\n    const submitButtonRef = this.form.querySelector('[type=\"submit\"]');\n    submitButtonRef.toggleAttribute('disabled');\n  }\n\n  createPromisesQueue() {\n    let iterationDelay = this.delay;\n\n    for (let i = 1; i <= this.amount; i += 1) {\n      this.createPromise(i, iterationDelay)\n        .then(({ position, delay }) => {\n          this.successNotification(`Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          this.failureNotification(`Rejected promise ${position} in ${delay}ms`);\n        })\n        .finally(() => {\n          if (i === this.amount) this.toggleSubmitButtonState();\n        });\n\n      iterationDelay += this.step;\n    }\n  }\n\n  createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  successNotification(message) {\n    if (this.onSuccess) {\n      this.onSuccess(message);\n    } else {\n      alert(message);\n    }\n  }\n\n  failureNotification(message) {\n    if (this.onFailure) {\n      this.onFailure(message);\n    } else {\n      alert(message);\n    }\n  }\n}\n\nconst promiseGenerator = new PromiseGenerator({\n  onSuccess: Notify.success,\n  onFailure: Notify.failure,\n});\n\nconst onFormSubmit = event => {\n  event.preventDefault();\n  promiseGenerator.start(event.currentTarget);\n};\n\nformRef.addEventListener('submit', onFormSubmit);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","Notify","init","distance","clickToClose","cssAnimationStyle","fontSize","delay","failure","background","$47d4ff9957288465$var$promiseGenerator","start","form","this","collectFormData","step","amount","toggleSubmitButtonState","createPromisesQueue","FormData","forEach","value","key","Number","toggleAttribute","iterationDelay","i","createPromise","then","position","successNotification","catch","failureNotification","finally","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","message","onSuccess","alert","onFailure","constructor","settings","success","addEventListener","event","preventDefault","currentTarget"],"version":3,"file":"03-promises.0d6721cf.js.map"}